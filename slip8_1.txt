Q.1) Create a simple Angular application that fetches data from an API using
HttpClient. Implement an Observable to fetch data from an API endpoint

Steps to Create the Application:
1. Set up the Angular Application: First, ensure you have Angular CLI installed.
If not, install it globally using the following command:
bash
Copy code
npm install -g @angular/cli
Then, create a new Angular project:
bash
Copy code
ng new fetch-data-app
cd fetch-data-app
2. Install Angular HTTP Client Module: The HttpClient module is required to
make HTTP requests. Angular CLI includes this module, but you need to
import it into your app.
Open app.module.ts and add the HttpClientModule to the imports:
typescript
Copy code
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { HttpClientModule } from '@angular/common/http'; // Import
HttpClientModule
import { AppComponent } from './app.component';
@NgModule({
declarations: [
AppComponent

],
imports: [
BrowserModule,
HttpClientModule // Add HttpClientModule here
],
providers: [],
bootstrap: [AppComponent]
})
export class AppModule { }
3. Create a Service to Fetch Data: Create a service to handle the HTTP requests.
You can generate a service using Angular CLI.
bash
Copy code
ng generate service data
In the data.service.ts file, write the code to fetch data from an API. For this
example, we'll use a dummy JSON API
(e.g., https://jsonplaceholder.typicode.com/posts).
typescript
Copy code
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
@Injectable({
providedIn: 'root'
})
export class DataService {
private apiUrl = 'https://jsonplaceholder.typicode.com/posts'; //
Replace with your API URL
constructor(private http: HttpClient) { }
// Method to fetch data using HTTP GET request
getPosts(): Observable<any> {
return this.http.get<any>(this.apiUrl);
}
}
In the getPosts() method, we're using http.get() to make an HTTP GET
request. This method returns an Observable, which is a common way to handle
asynchronous operations in Angular.
4. Use the Service in the Component: Open app.component.ts and modify it to
call the DataService and display the data.
typescript

Copy code
import { Component, OnInit } from '@angular/core';
import { DataService } from './data.service';
@Component({
selector: 'app-root',
templateUrl: './app.component.html',
styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
posts: any[] = []; // Array to store fetched posts
constructor(private dataService: DataService) {}
ngOnInit(): void {
// Fetch the data when the component initializes
this.dataService.getPosts().subscribe(
(data) => {
this.posts = data; // Store the fetched data in posts
},
(error) => {
console.error('Error fetching data', error);
}
);
}
}
Here, in the ngOnInit() lifecycle hook, we're calling the getPosts() method
from the DataService and subscribing to the returned Observable. When the
data is successfully fetched, it is stored in the posts array.
5. Display the Data in the Template: Open app.component.html and use ngFor to
loop through the posts array and display the data.
html
Copy code
<div class="container">
<h1>Posts</h1>
<div *ngIf="posts.length === 0">
<p>Loading...</p>
</div>
<div *ngFor="let post of posts">
<h3>{{ post.title }}</h3>
<p>{{ post.body }}</p>
</div>
</div>
The *ngFor directive is used to loop over each post and display its title and
body. The *ngIf directive checks if the posts array is empty (meaning the data
is still loading), and shows a "Loading..." message until the data is available.

6. Run the Application: After completing the above steps, start the Angular
development server:
bash
Copy code
ng serve
Open http://localhost:4200/ in your browser. You should see a list of posts
fetched from the API.
Full Code Summary:
app.module.ts:
typescript
Copy code
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { AppComponent } from './app.component';
@NgModule({
declarations: [
AppComponent
],
imports: [
BrowserModule,
HttpClientModule
],
providers: [],
bootstrap: [AppComponent]
})
export class AppModule { }
data.service.ts:
typescript
Copy code
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
@Injectable({
providedIn: 'root'
})
export class DataService {
private apiUrl = 'https://jsonplaceholder.typicode.com/posts';
constructor(private http: HttpClient) { }
getPosts(): Observable<any> {
return this.http.get<any>(this.apiUrl);

}
}
app.component.ts:
typescript
Copy code
import { Component, OnInit } from '@angular/core';
import { DataService } from './data.service';
@Component({
selector: 'app-root',
templateUrl: './app.component.html',
styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
posts: any[] = [];
constructor(private dataService: DataService) {}
ngOnInit(): void {
this.dataService.getPosts().subscribe(
(data) => {
this.posts = data;
},
(error) => {
console.error('Error fetching data', error);
}
);
}
}
app.component.html:
html
Copy code
<div class="container">
<h1>Posts</h1>
<div *ngIf="posts.length === 0">
<p>Loading...</p>
</div>
<div *ngFor="let post of posts">
<h3>{{ post.title }}</h3>
<p>{{ post.body }}</p>
</div>
</div>